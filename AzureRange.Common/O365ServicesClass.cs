// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using O365JSON;
//
//    var o365ServiceClass = O365ServiceClass.FromJson(jsonString);

namespace O365JSON
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class O365ServiceClass
    {
        [JsonProperty("id", Required = Required.Always)]
        public long Id { get; set; }

        [JsonProperty("serviceArea", Required = Required.Always)]
        public ServiceArea ServiceArea { get; set; }

        [JsonProperty("serviceAreaDisplayName", Required = Required.Always)]
        public ServiceAreaDisplayName ServiceAreaDisplayName { get; set; }

        [JsonProperty("urls", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Urls { get; set; }

        [JsonProperty("ips", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Ips { get; set; }

        [JsonProperty("tcpPorts", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public TcpPortsUnion? TcpPorts { get; set; }

        [JsonProperty("expressRoute", Required = Required.Always)]
        public bool ExpressRoute { get; set; }

        [JsonProperty("category", Required = Required.Always)]
        public Category Category { get; set; }

        [JsonProperty("required", Required = Required.Always)]
        public bool O365ServiceClassRequired { get; set; }

        [JsonProperty("notes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [JsonProperty("udpPorts", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string UdpPorts { get; set; }
    }

    public enum Category { Allow, Default, Optimize };

    public enum ServiceArea { Common, Exchange, SharePoint, Skype };

    public enum ServiceAreaDisplayName { ExchangeOnline, Microsoft365CommonAndOfficeOnline, SharePointOnlineAndOneDriveForBusiness, SkypeForBusinessOnlineAndMicrosoftTeams };

    public enum TcpPortsEnum { The143993, The80443 };

    public partial struct TcpPortsUnion
    {
        public TcpPortsEnum? Enum;
        public long? Integer;

        public static implicit operator TcpPortsUnion(TcpPortsEnum Enum) => new TcpPortsUnion { Enum = Enum };
        public static implicit operator TcpPortsUnion(long Integer) => new TcpPortsUnion { Integer = Integer };
    }

    public partial class O365ServiceClass
    {
        public static List<O365ServiceClass> FromJson(string json) => JsonConvert.DeserializeObject<List<O365ServiceClass>>(json, O365JSON.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<O365ServiceClass> self) => JsonConvert.SerializeObject(self, O365JSON.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CategoryConverter.Singleton,
                ServiceAreaConverter.Singleton,
                ServiceAreaDisplayNameConverter.Singleton,
                TcpPortsUnionConverter.Singleton,
                TcpPortsEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Allow":
                    return Category.Allow;
                case "Default":
                    return Category.Default;
                case "Optimize":
                    return Category.Optimize;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category)untypedValue;
            switch (value)
            {
                case Category.Allow:
                    serializer.Serialize(writer, "Allow");
                    return;
                case Category.Default:
                    serializer.Serialize(writer, "Default");
                    return;
                case Category.Optimize:
                    serializer.Serialize(writer, "Optimize");
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }

    internal class ServiceAreaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ServiceArea) || t == typeof(ServiceArea?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Common":
                    return ServiceArea.Common;
                case "Exchange":
                    return ServiceArea.Exchange;
                case "SharePoint":
                    return ServiceArea.SharePoint;
                case "Skype":
                    return ServiceArea.Skype;
            }
            throw new Exception("Cannot unmarshal type ServiceArea");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ServiceArea)untypedValue;
            switch (value)
            {
                case ServiceArea.Common:
                    serializer.Serialize(writer, "Common");
                    return;
                case ServiceArea.Exchange:
                    serializer.Serialize(writer, "Exchange");
                    return;
                case ServiceArea.SharePoint:
                    serializer.Serialize(writer, "SharePoint");
                    return;
                case ServiceArea.Skype:
                    serializer.Serialize(writer, "Skype");
                    return;
            }
            throw new Exception("Cannot marshal type ServiceArea");
        }

        public static readonly ServiceAreaConverter Singleton = new ServiceAreaConverter();
    }

    internal class ServiceAreaDisplayNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ServiceAreaDisplayName) || t == typeof(ServiceAreaDisplayName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Exchange Online":
                    return ServiceAreaDisplayName.ExchangeOnline;
                case "Microsoft 365 Common and Office Online":
                    return ServiceAreaDisplayName.Microsoft365CommonAndOfficeOnline;
                case "SharePoint Online and OneDrive for Business":
                    return ServiceAreaDisplayName.SharePointOnlineAndOneDriveForBusiness;
                case "Skype for Business Online and Microsoft Teams":
                    return ServiceAreaDisplayName.SkypeForBusinessOnlineAndMicrosoftTeams;
            }
            throw new Exception("Cannot unmarshal type ServiceAreaDisplayName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ServiceAreaDisplayName)untypedValue;
            switch (value)
            {
                case ServiceAreaDisplayName.ExchangeOnline:
                    serializer.Serialize(writer, "Exchange Online");
                    return;
                case ServiceAreaDisplayName.Microsoft365CommonAndOfficeOnline:
                    serializer.Serialize(writer, "Microsoft 365 Common and Office Online");
                    return;
                case ServiceAreaDisplayName.SharePointOnlineAndOneDriveForBusiness:
                    serializer.Serialize(writer, "SharePoint Online and OneDrive for Business");
                    return;
                case ServiceAreaDisplayName.SkypeForBusinessOnlineAndMicrosoftTeams:
                    serializer.Serialize(writer, "Skype for Business Online and Microsoft Teams");
                    return;
            }
            throw new Exception("Cannot marshal type ServiceAreaDisplayName");
        }

        public static readonly ServiceAreaDisplayNameConverter Singleton = new ServiceAreaDisplayNameConverter();
    }

    internal class TcpPortsUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TcpPortsUnion) || t == typeof(TcpPortsUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "143,993":
                            return new TcpPortsUnion { Enum = TcpPortsEnum.The143993 };
                        case "80,443":
                            return new TcpPortsUnion { Enum = TcpPortsEnum.The80443 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new TcpPortsUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type TcpPortsUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TcpPortsUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case TcpPortsEnum.The143993:
                        serializer.Serialize(writer, "143,993");
                        return;
                    case TcpPortsEnum.The80443:
                        serializer.Serialize(writer, "80,443");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type TcpPortsUnion");
        }

        public static readonly TcpPortsUnionConverter Singleton = new TcpPortsUnionConverter();
    }

    internal class TcpPortsEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TcpPortsEnum) || t == typeof(TcpPortsEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "143,993":
                    return TcpPortsEnum.The143993;
                case "80,443":
                    return TcpPortsEnum.The80443;
            }
            throw new Exception("Cannot unmarshal type TcpPortsEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TcpPortsEnum)untypedValue;
            switch (value)
            {
                case TcpPortsEnum.The143993:
                    serializer.Serialize(writer, "143,993");
                    return;
                case TcpPortsEnum.The80443:
                    serializer.Serialize(writer, "80,443");
                    return;
            }
            throw new Exception("Cannot marshal type TcpPortsEnum");
        }

        public static readonly TcpPortsEnumConverter Singleton = new TcpPortsEnumConverter();
    }
}
